import { __bootstrap } from './999_bootstrap.js';
import { primordials } from './00_primordials.js';
import {
    opAsync,
    initializeAsyncOps,
    resources,
    metrics,
    registerErrorBuilder,
    registerErrorClass,
    buildCustomError,
    opresolve,
    BadResource,
    BadResourcePrototype,
    Interrupted,
    InterruptedPrototype,
    enableOpCallTracing,
    isOpCallTracingEnabled,
    opCallTraces,
    refOp,
    unrefOp,
    setReportExceptionCallback,
    setPromiseHooks,
    close,
    tryClose,
    read,
    readAll,
    write,
    writeAll,
    shutdown,
    print,
    setMacrotaskCallback,
    setNextTickCallback,
    runMicrotasks,
    hasTickScheduled,
    setHasTickScheduled,
    evalContext,
    createHostObject,
    encode,
    decode,
    serialize,
    deserialize,
    getPromiseDetails,
    getProxyDetails,
    isProxy,
    memoryUsage,
    setWasmStreamingCallback,
    abortWasmStreaming,
    destructureError,
    opNames,
    eventLoopHasMoreWork,
    setPromiseRejectCallback,
    byteLength,
} from './01_core.js';

const {
    setQueueMicrotask,
    ObjectAssign,
} = primordials;

// Extra Deno.core.* exports
const core = ObjectAssign({}, {
    opAsync,
    initializeAsyncOps,
    resources,
    metrics,
    registerErrorBuilder,
    registerErrorClass,
    buildCustomError,
    opresolve,
    BadResource,
    BadResourcePrototype,
    Interrupted,
    InterruptedPrototype,
    enableOpCallTracing,
    isOpCallTracingEnabled,
    opCallTraces,
    refOp,
    unrefOp,
    setReportExceptionCallback,
    setPromiseHooks,
    close,
    tryClose,
    read,
    readAll,
    write,
    writeAll,
    shutdown,
    print,
    setMacrotaskCallback,
    setNextTickCallback,
    runMicrotasks,
    hasTickScheduled,
    setHasTickScheduled,
    evalContext,
    createHostObject,
    encode,
    decode,
    serialize,
    deserialize,
    getPromiseDetails,
    getProxyDetails,
    isProxy,
    memoryUsage,
    setWasmStreamingCallback,
    abortWasmStreaming,
    destructureError,
    opNames,
    eventLoopHasMoreWork,
    setPromiseRejectCallback,
    byteLength,
});

ObjectAssign(globalThis, { __bootstrap });
ObjectAssign(globalThis.__bootstrap, { core });
ObjectAssign(globalThis.Deno, { core });

// Direct bindings on `globalThis`
ObjectAssign(globalThis, { queueMicrotask });
setQueueMicrotask(queueMicrotask);
